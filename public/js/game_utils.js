// Generated by CoffeeScript 1.6.3
(function() {
  var GameUtils;

  window.Game = window.Game || {};

  window.GameUtils = GameUtils = (function() {
    function GameUtils() {}

    GameUtils.prototype.isObstructed = function(startSquare, endSquare, board) {
      var col, i, j, row, slope, xDist, xRange, yDist, yRange, _i, _j, _k, _l, _m, _ref, _ref1, _ref2, _ref3, _ref4, _results, _results1;
      if (endSquare.x === startSquare.x) {
        i = Math.min(startSquare.y, endSquare.y) + 1;
        j = Math.max(startSquare.y, endSquare.y) - 1;
        if (j - i < 0) {
          return false;
        }
        for (row = _i = i; i <= j ? _i <= j : _i >= j; row = i <= j ? ++_i : --_i) {
          if (board[startSquare.x][row].piece != null) {
            return true;
          }
        }
      }
      if (endSquare.y === startSquare.y) {
        i = Math.min(startSquare.x, endSquare.x) + 1;
        j = Math.max(startSquare.x, endSquare.x) - 1;
        if (j - i < 0) {
          return false;
        }
        console.log("check cols " + i + " to " + j);
        for (col = _j = i; i <= j ? _j <= j : _j >= j; col = i <= j ? ++_j : --_j) {
          if (board[col][startSquare.y].piece != null) {
            return true;
          }
        }
      }
      xDist = endSquare.x - startSquare.x;
      yDist = endSquare.y - startSquare.y;
      console.log("xDist " + xDist);
      console.log("yDist " + yDist);
      slope = xDist / yDist;
      if (Math.abs(slope) === 1 && Math.abs(xDist) > 1 && Math.abs(yDist) > 1) {
        xRange = (function() {
          _results = [];
          for (var _k = _ref = startSquare.x, _ref1 = endSquare.x; _ref <= _ref1 ? _k <= _ref1 : _k >= _ref1; _ref <= _ref1 ? _k++ : _k--){ _results.push(_k); }
          return _results;
        }).apply(this).slice(1, -1);
        yRange = (function() {
          _results1 = [];
          for (var _l = _ref2 = startSquare.y, _ref3 = endSquare.y; _ref2 <= _ref3 ? _l <= _ref3 : _l >= _ref3; _ref2 <= _ref3 ? _l++ : _l--){ _results1.push(_l); }
          return _results1;
        }).apply(this).slice(1, -1);
        console.log("xrange");
        console.log(xRange);
        console.log("yrange");
        console.log(yRange);
        for (i = _m = 0, _ref4 = xRange.length; 0 <= _ref4 ? _m < _ref4 : _m > _ref4; i = 0 <= _ref4 ? ++_m : --_m) {
          console.log(board[xRange[i]][yRange[i]]);
          if (board[xRange[i]][yRange[i]].piece != null) {
            return true;
          }
        }
      }
      return false;
    };

    return GameUtils;

  })();

}).call(this);
