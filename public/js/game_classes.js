// Generated by CoffeeScript 1.6.3
(function() {
  var Bishop, King, Knight, Pawn, Piece, Queen, Rook, Square, getDiagonalThreat, getStraightThreat, _ref, _ref1, _ref2, _ref3, _ref4, _ref5,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.Game = window.Game || {};

  window.Square = Square = (function() {
    function Square(name, row, col, piece, x, y) {
      this.name = name;
      this.row = row;
      this.col = col;
      this.piece = piece;
      this.x = x;
      this.y = y;
      this.threat = [];
    }

    return Square;

  })();

  window.Piece = Piece = (function() {
    function Piece(params) {
      this.color = params.color;
      this.text = params.text;
      this.placed = params.placed;
      this.graphic = "../img/" + this.text + "_" + this.color + ".png";
      this.name = "" + this.color + " " + this.text;
    }

    Piece.prototype.move = function(startSquare, endSquare, cb) {
      if (this.validMove(startSquare, endSquare)) {
        return cb(true);
      }
      return cb(false);
    };

    Piece.prototype.validMove = function(startSquare, endSquare) {
      if ((endSquare.piece != null) && endSquare.piece.color === this.color) {
        return false;
      }
      return true;
    };

    Piece.prototype.getThreatenedSquares = function(board) {
      return [];
    };

    Piece.prototype.toString = function() {
      return "" + this.color + " " + this.text;
    };

    return Piece;

  })();

  window.Pawn = Pawn = (function(_super) {
    __extends(Pawn, _super);

    function Pawn() {
      _ref = Pawn.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    Pawn.prototype.move = function(startSquare, endSquare, cb) {
      if (this.validMove(startSquare, endSquare)) {
        return cb(true);
      }
      return cb(false);
    };

    Pawn.prototype.validMove = function(startSquare, endSquare) {
      var dir, homeRow;
      if (!Pawn.__super__.validMove.call(this, startSquare, endSquare)) {
        return false;
      }
      dir = 1;
      if (this.color === "black") {
        dir = -1;
      }
      if (Math.abs(endSquare.x - startSquare.x) === 1 && (endSquare.piece != null) && endSquare.piece.color !== this.color) {
        return true;
      }
      if (dir * (endSquare.row - startSquare.row) === 1 && endSquare.col === startSquare.col && (endSquare.piece == null)) {
        return true;
      }
      homeRow = 2;
      if (this.color === "black") {
        homeRow = 7;
      }
      if (startSquare.row === homeRow && dir * (endSquare.row - startSquare.row) === 2 && endSquare.col === startSquare.col && (endSquare.piece == null)) {
        return true;
      }
      return false;
    };

    Pawn.prototype.getThreatenedSquares = function(board, x, y) {
      var dir, sqs;
      sqs = [];
      dir = 1;
      if (this.color === "black") {
        dir = -1;
      }
      if (x > 0) {
        sqs.push(board[x - 1][y + dir]);
      }
      if (x < 7) {
        sqs.push(board[x + 1][y + dir]);
      }
      return sqs;
    };

    return Pawn;

  })(Piece);

  window.Rook = Rook = (function(_super) {
    __extends(Rook, _super);

    function Rook() {
      _ref1 = Rook.__super__.constructor.apply(this, arguments);
      return _ref1;
    }

    Rook.prototype.validMove = function(startSquare, endSquare) {
      if (!Rook.__super__.validMove.call(this, startSquare, endSquare)) {
        return false;
      }
      return !(endSquare.x !== startSquare.x && endSquare.y !== startSquare.y);
    };

    Rook.prototype.getThreatenedSquares = function(board, x, y) {
      return getStraightThreat(board, x, y);
    };

    return Rook;

  })(Piece);

  window.Knight = Knight = (function(_super) {
    __extends(Knight, _super);

    function Knight() {
      _ref2 = Knight.__super__.constructor.apply(this, arguments);
      return _ref2;
    }

    Knight.prototype.validMove = function(startSquare, endSquare) {
      var xDist, yDist;
      if (!Knight.__super__.validMove.call(this, startSquare, endSquare)) {
        return false;
      }
      xDist = Math.abs(endSquare.x - startSquare.x);
      yDist = Math.abs(endSquare.y - startSquare.y);
      return xDist === 1 && yDist === 2 || xDist === 2 && yDist === 1;
    };

    Knight.prototype.getThreatenedSquares = function(board, x, y) {
      var coord, coords, sqs, _i, _len;
      coords = [
        {
          x: x - 1,
          y: y - 2
        }, {
          x: x + 1,
          y: y - 2
        }, {
          x: x + 2,
          y: y - 1
        }, {
          x: x + 2,
          y: y + 1
        }, {
          x: x + 1,
          y: y + 2
        }, {
          x: x - 1,
          y: y + 2
        }, {
          x: x - 2,
          y: y + 1
        }, {
          x: x - 2,
          y: y - 1
        }
      ];
      sqs = [];
      for (_i = 0, _len = coords.length; _i < _len; _i++) {
        coord = coords[_i];
        if (coord.x >= 0 && coord.y >= 0 && coord.x < 8 && coord.y < 8) {
          sqs.push(board[coord.x][coord.y]);
        }
      }
      return sqs;
    };

    return Knight;

  })(Piece);

  window.Bishop = Bishop = (function(_super) {
    __extends(Bishop, _super);

    function Bishop() {
      _ref3 = Bishop.__super__.constructor.apply(this, arguments);
      return _ref3;
    }

    Bishop.prototype.validMove = function(startSquare, endSquare) {
      var slope, xDist, yDist;
      if (!Bishop.__super__.validMove.call(this, startSquare, endSquare)) {
        return false;
      }
      xDist = endSquare.x - startSquare.x;
      yDist = endSquare.y - startSquare.y;
      slope = xDist / yDist;
      return Math.abs(slope) === 1;
    };

    Bishop.prototype.getThreatenedSquares = function(board, x, y) {
      return getDiagonalThreat(board, x, y);
    };

    return Bishop;

  })(Piece);

  window.King = King = (function(_super) {
    __extends(King, _super);

    function King() {
      _ref4 = King.__super__.constructor.apply(this, arguments);
      return _ref4;
    }

    King.prototype.validMove = function(startSquare, endSquare) {
      var piece, threats, xDist, yDist, _i, _len;
      if (!King.__super__.validMove.call(this, startSquare, endSquare)) {
        return false;
      }
      threats = endSquare.threats || [];
      for (_i = 0, _len = threats.length; _i < _len; _i++) {
        piece = threats[_i];
        if (piece.color !== this.color) {
          console.log("can't move king on to threatened square");
          return false;
        }
      }
      xDist = Math.abs(endSquare.x - startSquare.x);
      yDist = Math.abs(endSquare.y - startSquare.y);
      return xDist <= 1 && yDist <= 1;
    };

    King.prototype.getThreatenedSquares = function(board, x, y) {
      var coord, coords, sqs, _i, _len;
      coords = [
        {
          x: x - 1,
          y: y - 1
        }, {
          x: x,
          y: y - 1
        }, {
          x: x + 1,
          y: y - 1
        }, {
          x: x + 1,
          y: y
        }, {
          x: x + 1,
          y: y + 1
        }, {
          x: x,
          y: y + 1
        }, {
          x: x - 1,
          y: y + 1
        }, {
          x: x - 1,
          y: y
        }
      ];
      sqs = [];
      for (_i = 0, _len = coords.length; _i < _len; _i++) {
        coord = coords[_i];
        if (coord.x >= 0 && coord.y >= 0 && coord.x < 8 && coord.y < 8) {
          sqs.push(board[coord.x][coord.y]);
        }
      }
      return sqs;
    };

    return King;

  })(Piece);

  window.Queen = Queen = (function(_super) {
    __extends(Queen, _super);

    function Queen() {
      _ref5 = Queen.__super__.constructor.apply(this, arguments);
      return _ref5;
    }

    Queen.prototype.validMove = function(startSquare, endSquare) {
      var slope, xDist, yDist;
      if (!Queen.__super__.validMove.call(this, startSquare, endSquare)) {
        return false;
      }
      xDist = endSquare.x - startSquare.x;
      yDist = endSquare.y - startSquare.y;
      slope = xDist / yDist;
      if (Math.abs(slope) === 1) {
        return true;
      }
      if (endSquare.x !== startSquare.x && endSquare.y === startSquare.y) {
        return true;
      }
      if (endSquare.x === startSquare.x && endSquare.y !== startSquare.y) {
        return true;
      }
    };

    Queen.prototype.getThreatenedSquares = function(board, x, y) {
      return getStraightThreat(board, x, y).concat(getDiagonalThreat(board, x, y));
    };

    return Queen;

  })(Piece);

  getStraightThreat = function(board, x, y) {
    var col, row, threatenedSqs, _i, _j, _k, _l, _ref6, _ref7, _ref8, _ref9;
    threatenedSqs = [];
    for (col = _i = _ref6 = x - 1; _ref6 <= 0 ? _i <= 0 : _i >= 0; col = _ref6 <= 0 ? ++_i : --_i) {
      if (col === -1) {
        break;
      }
      if (board[col][y].piece != null) {
        threatenedSqs.push(board[col][y]);
        break;
      }
      threatenedSqs.push(board[col][y]);
    }
    for (col = _j = _ref7 = x + 1; _ref7 <= 7 ? _j <= 7 : _j >= 7; col = _ref7 <= 7 ? ++_j : --_j) {
      if (col === 8) {
        break;
      }
      if (board[col][y].piece != null) {
        threatenedSqs.push(board[col][y]);
        break;
      }
      threatenedSqs.push(board[col][y]);
    }
    for (row = _k = _ref8 = y - 1; _ref8 <= 0 ? _k <= 0 : _k >= 0; row = _ref8 <= 0 ? ++_k : --_k) {
      if (row === -1) {
        break;
      }
      if (board[x][row].piece != null) {
        threatenedSqs.push(board[x][row]);
        break;
      }
      threatenedSqs.push(board[x][row]);
    }
    for (row = _l = _ref9 = y + 1; _ref9 <= 7 ? _l <= 7 : _l >= 7; row = _ref9 <= 7 ? ++_l : --_l) {
      if (row === 8) {
        break;
      }
      if (board[x][row].piece != null) {
        threatenedSqs.push(board[x][row]);
        break;
      }
      threatenedSqs.push(board[x][row]);
    }
    return threatenedSqs;
  };

  getDiagonalThreat = function(board, x, y) {
    var col, row, threatenedSqs;
    threatenedSqs = [];
    row = y - 1;
    col = x - 1;
    while (row >= 0 && col >= 0) {
      if (board[col][row].piece != null) {
        threatenedSqs.push(board[col][row]);
        break;
      }
      threatenedSqs.push(board[col][row]);
      row--;
      col--;
    }
    row = y - 1;
    col = x + 1;
    while (row >= 0 && col < 8) {
      if (board[col][row].piece != null) {
        threatenedSqs.push(board[col][row]);
        break;
      }
      threatenedSqs.push(board[col][row]);
      row--;
      col++;
    }
    row = y + 1;
    col = x + 1;
    while (row < 8 && col < 8) {
      if (board[col][row].piece != null) {
        threatenedSqs.push(board[col][row]);
        break;
      }
      threatenedSqs.push(board[col][row]);
      row++;
      col++;
    }
    row = y + 1;
    col = x - 1;
    while (row < 8 && col >= 0) {
      if (board[col][row].piece != null) {
        threatenedSqs.push(board[col][row]);
        break;
      }
      threatenedSqs.push(board[col][row]);
      row++;
      col--;
    }
    return threatenedSqs;
  };

}).call(this);
