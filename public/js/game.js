// Generated by CoffeeScript 1.6.3
(function() {
  var A, B, C, D, E, F, G, H, createBoard, dark, drawBoard, drawPieces, endSquare, light, squareSize, startSquare, startX, startY;

  window.Game = window.Game || {};

  squareSize = 70;

  dark = "#34495e";

  light = "#95a5a6";

  A = 7;

  B = 6;

  C = 5;

  D = 4;

  E = 3;

  F = 2;

  G = 1;

  H = 0;

  startSquare = void 0;

  startX = void 0;

  startY = void 0;

  endSquare = void 0;

  oCanvas.domReady(function() {
    var board, canvas;
    board = createBoard();
    canvas = oCanvas.create({
      canvas: "#board",
      background: dark
    });
    canvas.height = 8 * squareSize;
    canvas.width = 8 * squareSize;
    drawBoard(canvas);
    return drawPieces(canvas, board);
  });

  createBoard = function() {
    var board, col, letter, letters, num, _i;
    letters = (function() {
      var _i, _results;
      _results = [];
      for (letter = _i = 72; _i >= 65; letter = --_i) {
        _results.push(String.fromCharCode(letter));
      }
      return _results;
    })();
    board = (function() {
      var _i, _len, _results;
      _results = [];
      for (_i = 0, _len = letters.length; _i < _len; _i++) {
        letter = letters[_i];
        _results.push((function() {
          var _j, _results1;
          _results1 = [];
          for (num = _j = 1; _j <= 8; num = ++_j) {
            _results1.push(new window.Square("" + letter + num));
          }
          return _results1;
        })());
      }
      return _results;
    })();
    for (col = _i = 0; _i <= 7; col = ++_i) {
      board[col][1].piece = new window.Pawn("white", "pawn");
      board[col][6].piece = new window.Pawn("black", "pawn");
    }
    board[A][0].piece = new window.Rook("white", "rook");
    board[H][0].piece = new window.Rook("white", "rook");
    board[A][7].piece = new window.Rook("black", "rook");
    board[H][7].piece = new window.Rook("black", "rook");
    board[B][0].piece = new window.Knight("white", "knight");
    board[G][0].piece = new window.Knight("white", "knight");
    board[B][7].piece = new window.Knight("black", "knight");
    board[G][7].piece = new window.Knight("black", "knight");
    board[C][0].piece = new window.Bishop("white", "bishop");
    board[F][0].piece = new window.Bishop("white", "bishop");
    board[C][7].piece = new window.Bishop("black", "bishop");
    board[F][7].piece = new window.Bishop("black", "bishop");
    board[E][0].piece = new window.King("white", "king");
    board[E][7].piece = new window.King("black", "king");
    board[D][0].piece = new window.Queen("white", "queen");
    board[D][7].piece = new window.Queen("black", "queen");
    return board;
  };

  drawPieces = function(canvas, board) {
    var text, x, y, _i, _results;
    _results = [];
    for (x = _i = 0; _i <= 7; x = ++_i) {
      _results.push((function() {
        var _j, _results1;
        _results1 = [];
        for (y = _j = 0; _j <= 7; y = ++_j) {
          text = canvas.display.text({
            x: x * squareSize + squareSize / 2,
            y: y * squareSize + squareSize / 2,
            origin: {
              x: "center",
              y: "center"
            },
            font: "bold 12px sans-serif",
            text: board[x][y].piece != null ? board[x][y].piece.toString() : board[x][y].name,
            fill: "#2980b9"
          });
          canvas.addChild(text);
          _results1.push(text.dragAndDrop({
            start: function() {
              startX = this.x;
              startY = this.y;
              return startSquare = board[Math.floor(this.x / squareSize)][Math.floor(this.y / squareSize)];
            },
            end: function() {
              var piece, that;
              if (startSquare.piece == null) {
                console.log("No piece selected");
                return;
              }
              piece = startSquare.piece;
              endSquare = board[Math.floor(this.x / squareSize)][Math.floor(this.y / squareSize)];
              that = this;
              return piece.move(endSquare, function(isValid) {
                if (!isValid) {
                  that.x = startX;
                  return that.y = startY;
                }
              });
            }
          }));
        }
        return _results1;
      })());
    }
    return _results;
  };

  drawBoard = function(canvas) {
    var createRectangle, x, y, _i, _results;
    createRectangle = function(x, y, color) {
      var rectangle;
      rectangle = canvas.display.rectangle({
        x: x,
        y: y,
        width: squareSize,
        height: squareSize,
        fill: color
      });
      return canvas.addChild(rectangle);
    };
    _results = [];
    for (x = _i = 0; _i <= 7; x = ++_i) {
      _results.push((function() {
        var _j, _results1;
        _results1 = [];
        for (y = _j = 0; _j <= 7; y = ++_j) {
          _results1.push(createRectangle(x * squareSize, y * squareSize, (y + x) % 2 === 0 ? light : dark));
        }
        return _results1;
      })());
    }
    return _results;
  };

}).call(this);
