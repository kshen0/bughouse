// Generated by CoffeeScript 1.6.3
(function() {
  var A, B, C, D, E, F, G, H, board, createBoard, dark, drawBoard, drawPieces, endSquare, isObstructed, light, squareSize, startSquare, startX, startY;

  window.Game = window.Game || {};

  squareSize = 70;

  dark = "#34495e";

  light = "#95a5a6";

  A = 7;

  B = 6;

  C = 5;

  D = 4;

  E = 3;

  F = 2;

  G = 1;

  H = 0;

  startSquare = void 0;

  startX = void 0;

  startY = void 0;

  endSquare = void 0;

  board = void 0;

  oCanvas.domReady(function() {
    var canvas;
    board = createBoard();
    canvas = oCanvas.create({
      canvas: "#board",
      background: dark
    });
    canvas.height = 8 * squareSize;
    canvas.width = 8 * squareSize;
    drawBoard(canvas);
    return drawPieces(canvas, board);
  });

  createBoard = function() {
    var col, letter, letters, num, x, y, _i, _j, _k;
    letters = (function() {
      var _i, _results;
      _results = [];
      for (letter = _i = 72; _i >= 65; letter = --_i) {
        _results.push(String.fromCharCode(letter));
      }
      return _results;
    })();
    board = (function() {
      var _i, _len, _results;
      _results = [];
      for (_i = 0, _len = letters.length; _i < _len; _i++) {
        letter = letters[_i];
        _results.push((function() {
          var _j, _results1;
          _results1 = [];
          for (num = _j = 1; _j <= 8; num = ++_j) {
            _results1.push(new window.Square("" + letter + num, num, letter));
          }
          return _results1;
        })());
      }
      return _results;
    })();
    for (y = _i = 0; _i <= 7; y = ++_i) {
      for (x = _j = 0; _j <= 7; x = ++_j) {
        board[x][y].x = x;
        board[x][y].y = y;
      }
    }
    for (col = _k = 0; _k <= 7; col = ++_k) {
      board[col][1].piece = new window.Pawn("white", "pawn");
      board[col][6].piece = new window.Pawn("black", "pawn");
    }
    board[A][0].piece = new window.Rook("white", "rook");
    board[H][0].piece = new window.Rook("white", "rook");
    board[A][7].piece = new window.Rook("black", "rook");
    board[H][7].piece = new window.Rook("black", "rook");
    board[B][0].piece = new window.Knight("white", "knight");
    board[G][0].piece = new window.Knight("white", "knight");
    board[B][7].piece = new window.Knight("black", "knight");
    board[G][7].piece = new window.Knight("black", "knight");
    board[C][0].piece = new window.Bishop("white", "bishop");
    board[F][0].piece = new window.Bishop("white", "bishop");
    board[C][7].piece = new window.Bishop("black", "bishop");
    board[F][7].piece = new window.Bishop("black", "bishop");
    board[E][0].piece = new window.King("white", "king");
    board[E][7].piece = new window.King("black", "king");
    board[D][0].piece = new window.Queen("white", "queen");
    board[D][7].piece = new window.Queen("black", "queen");
    return board;
  };

  drawPieces = function(canvas, board) {
    var img, x, y, _i, _results;
    _results = [];
    for (x = _i = 0; _i <= 7; x = ++_i) {
      _results.push((function() {
        var _j, _results1;
        _results1 = [];
        for (y = _j = 0; _j <= 7; y = ++_j) {
          if (board[x][y].piece != null) {
            img = canvas.display.image({
              x: x * squareSize + squareSize / 2,
              y: y * squareSize + squareSize / 2,
              origin: {
                x: "center",
                y: "center"
              },
              image: board[x][y].piece.graphic
            });
            canvas.addChild(img);
            _results1.push(img.dragAndDrop({
              start: function() {
                startX = this.x;
                startY = this.y;
                return startSquare = board[Math.floor(this.x / squareSize)][Math.floor(this.y / squareSize)];
              },
              end: function() {
                var piece, that;
                if (startSquare.piece == null) {
                  console.log("No piece selected");
                  return;
                }
                piece = startSquare.piece;
                endSquare = board[Math.floor(this.x / squareSize)][Math.floor(this.y / squareSize)];
                that = this;
                return piece.move(startSquare, endSquare, function(isValid) {
                  if (!isValid || isObstructed(startSquare, endSquare, board)) {
                    that.x = startX;
                    return that.y = startY;
                  } else {
                    if (endSquare.piece != null) {
                      endSquare.piece.graphic.remove();
                    }
                    startSquare.piece.square = endSquare;
                    endSquare.piece = startSquare.piece;
                    startSquare.piece = void 0;
                    that.x = (that.x - that.x % squareSize) + squareSize / 2;
                    return that.y = (that.y - that.y % squareSize) + squareSize / 2;
                  }
                });
              }
            }));
          } else {
            _results1.push(void 0);
          }
        }
        return _results1;
      })());
    }
    return _results;
  };

  drawBoard = function(canvas) {
    var createRectangle, x, y, _i, _results;
    createRectangle = function(x, y, color) {
      var rectangle;
      rectangle = canvas.display.rectangle({
        x: x,
        y: y,
        width: squareSize,
        height: squareSize,
        fill: color
      });
      return canvas.addChild(rectangle);
    };
    _results = [];
    for (x = _i = 0; _i <= 7; x = ++_i) {
      _results.push((function() {
        var _j, _results1;
        _results1 = [];
        for (y = _j = 0; _j <= 7; y = ++_j) {
          _results1.push(createRectangle(x * squareSize, y * squareSize, (y + x) % 2 === 0 ? light : dark));
        }
        return _results1;
      })());
    }
    return _results;
  };

  isObstructed = function(startSquare, endSquare, board) {
    var col, i, j, row, slope, xDist, xRange, yDist, yRange, _i, _j, _k, _l, _m, _ref, _ref1, _ref2, _ref3, _ref4, _results, _results1;
    if (endSquare.x === startSquare.x) {
      i = Math.min(startSquare.y, endSquare.y) + 1;
      j = Math.max(startSquare.y, endSquare.y) - 1;
      if (j - i < 0) {
        return false;
      }
      for (row = _i = i; i <= j ? _i <= j : _i >= j; row = i <= j ? ++_i : --_i) {
        if (board[startSquare.x][row].piece != null) {
          return true;
        }
      }
    }
    if (endSquare.y === startSquare.y) {
      i = Math.min(startSquare.x, endSquare.x) + 1;
      j = Math.max(startSquare.x, endSquare.x) - 1;
      if (j - i < 0) {
        return false;
      }
      console.log("check cols " + i + " to " + j);
      for (col = _j = i; i <= j ? _j <= j : _j >= j; col = i <= j ? ++_j : --_j) {
        if (board[col][startSquare.y].piece != null) {
          return true;
        }
      }
    }
    xDist = endSquare.x - startSquare.x;
    yDist = endSquare.y - startSquare.y;
    console.log("xDist " + xDist);
    console.log("yDist " + yDist);
    slope = xDist / yDist;
    if (Math.abs(slope) === 1 && Math.abs(xDist) > 1 && Math.abs(yDist) > 1) {
      xRange = (function() {
        _results = [];
        for (var _k = _ref = startSquare.x, _ref1 = endSquare.x; _ref <= _ref1 ? _k <= _ref1 : _k >= _ref1; _ref <= _ref1 ? _k++ : _k--){ _results.push(_k); }
        return _results;
      }).apply(this).slice(1, -1);
      yRange = (function() {
        _results1 = [];
        for (var _l = _ref2 = startSquare.y, _ref3 = endSquare.y; _ref2 <= _ref3 ? _l <= _ref3 : _l >= _ref3; _ref2 <= _ref3 ? _l++ : _l--){ _results1.push(_l); }
        return _results1;
      }).apply(this).slice(1, -1);
      console.log("xrange");
      console.log(xRange);
      console.log("yrange");
      console.log(yRange);
      for (i = _m = 0, _ref4 = xRange.length; 0 <= _ref4 ? _m < _ref4 : _m > _ref4; i = 0 <= _ref4 ? ++_m : --_m) {
        console.log(board[xRange[i]][yRange[i]]);
        if (board[xRange[i]][yRange[i]].piece != null) {
          return true;
        }
      }
    }
    return false;
  };

}).call(this);
